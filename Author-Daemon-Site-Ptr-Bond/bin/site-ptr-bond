#!/usr/bin/env perl

# Perl core
use v5.32;
use strict;
use warnings;
use experimental "signatures";

# ABSTRACT: turns baubles into trinkets

# Version
our $VERSION = '0.009';

# Perl bundled
use Carp qw(cluck longmess shortmess);
use Data::Dumper;

# Private local

# Private remote

# Community
use Mojolicious::Lite -signatures;

# Route a static index page
get '/' => sub ($c) {
    $c->render( text => 'Hello World!' );
};

# Render the template "index.html.ep"
get '/notindex' => sub ($c) {
    $c->render;
} => 'index';

# Render the template "hello.html.ep"
get '/hello';

# Route with parameter
get '/param' => sub ($c) {
    my $user = $c->param('user');
    if ( !$user ) {
        $c->render( text => "Hello anonymous." );
        return;
    }
    $c->render( text => "Hello $user." );
};

# Access request information
get '/agent' => sub ($c) {
    my $host = $c->req->url->to_abs->host;
    my $ua   = $c->req->headers->user_agent;
    $c->render( text => "Request by $ua reached $host." );
};

# Echo the request body and send custom header with response
get '/echo' => sub ($c) {
    my $headers = $c->req->headers->to_hash;

    my $response =
      '<table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody>';
    foreach my $request_key ( keys %{$headers} ) {
        $response .= "</tr>";
        $response .= "<td>$request_key</td>";
        $response .= "<td>$headers->{$request_key}" . "</td>";
        $response .= "</tr>";
    }
    $response .= '</tbody></table>';

    #$c->res->headers->header( 'X-Bender' => 'Bite my shiny metal ass!' );
    $c->render( 'text' => $response );
};

# Route with JSON rendering
# Modify the received JSON document and return it
put '/reverse' => sub ($c) {
    my $hash = $c->req->json;
    $hash->{message} = reverse $hash->{message};
    $c->render( json => $hash );
};

# Route with stash
get '/stash' => sub ($c) {
    $c->stash( 'one' => 23 );
    $c->render( 'template' => 'magic', 'two' => 24 );
};

# Not found (404) - Example exception
get '/missing' => sub ($c) {
    $c->render( template => 'does_not_exist' );
};

# Exception (500) - Example exception
get '/dies' => sub { die 'Intentional error' };

# Use layouts (see: with_layout.html.ep in the __DATA__ section)
get '/with_layout';

# Use a perl block in a template (See: with_block in the data section)
get '/with_block' => 'block';

# A helper to identify visitors
helper whois => sub ($c) {
    my $agent = $c->req->headers->user_agent || 'Anonymous';
    my $ip    = $c->tx->remote_address;
    return "$agent ($ip)";
};

# Use helper in action and template
get '/secret' => sub ($c) {
    my $user = $c->whois;
    $c->app->log->debug("Request from $user");
};

# Plugins!
# Assuming we are in the working directory of the site script
plugin Config => { file => '../etc/site.conf', default => { 'foox' => 'bar' } };

# Return configured foo value, or default if no configuration file
get '/config' => sub ($c) {
    my $foo  = $c->app->config('foo');
    my $foox = $c->app->config('foox');
    $c->render( 'json' => { 'foo' => $foo, 'foox' => $foox } );
};

# /foo/test
# /foo/test123
get '/placeholders/:bar' => sub ($c) {
    my $bar = $c->stash('bar');
    $c->render( 'text' => "Our :bar placeholder matched $bar" );
};

# /testsomething/foo
# /test123something/foo
get '/<:bar>something/foo' => sub ($c) {
    my $bar = $c->param('bar');
    $c->render( 'text' => "Our :bar placeholder matched $bar" );
};

# Start the Mojolicious command system
app->start;

exit 0;

__DATA__

@@ magic.html.ep
The magic numbers are <%= $one %> and <%= $two %>.

@@ index.html.ep
<%= link_to Hello  => 'hello' %>.
<%= link_to Reload => 'index' %>.

@@ hello.html.ep
Hello World!

@@ with_layout.html.ep
% title 'Green';
% layout 'green';
Hello World!

@@ layouts/green.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body style="background-color:<%= title %>"><%= content %></body>
</html>

@@ block.html.ep
% my $link = begin
  % my ($url, $name) = @_;
  Try <%= link_to $url => begin %><%= $name %><% end %>.
% end
<!DOCTYPE html>
<html>
  <head><title>Sebastians frameworks</title></head>
  <body>
    %= $link->('http://mojolicious.org', 'Mojolicious')
    %= $link->('http://mojojs.org', 'mojo.js')
  </body>
</html>

@@ secret.html.ep
We know who you are <%= whois %>.
